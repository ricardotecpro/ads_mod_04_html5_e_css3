# HTML e CSS: Do B√°sico √†s Pr√°ticas Modernas üöÄ

Bem-vindo ao curso de desenvolvimento web com foco em HTML e CSS\! Este material foi projetado para levar voc√™ do zero ao conhecimento necess√°rio para construir interfaces web modernas, responsivas e acess√≠veis.

**Para quem √© este curso?**

  * Iniciantes que nunca escreveram uma linha de c√≥digo.
  * Pessoas que j√° tiveram algum contato com HTML/CSS, mas querem se atualizar sobre as pr√°ticas do mercado.
  * Desenvolvedores de outras √°reas que desejam entender os fundamentos do front-end.

**O que voc√™ vai aprender?**

  * Criar a estrutura sem√¢ntica de um site com **HTML5**.
  * Estilizar p√°ginas de forma eficiente e escal√°vel com **CSS3**.
  * Construir layouts complexos e flex√≠veis com **Flexbox** e **CSS Grid**.
  * Desenvolver sites que funcionam em qualquer dispositivo com **Design Responsivo**.
  * Organizar seu c√≥digo com a metodologia **BEM** e usar **Vari√°veis CSS** para criar sistemas de design consistentes.

-----

## M√≥dulo 1: Fundamentos do HTML - A Estrutura da Web Îºà

Neste m√≥dulo, vamos construir o esqueleto da nossa p√°gina, entendendo a import√¢ncia de uma estrutura bem-organizada e sem√¢ntica.

### 1.1. O que √© HTML?

HTML (HyperText Markup Language) n√£o √© uma linguagem de programa√ß√£o, mas sim uma **linguagem de marca√ß√£o**. Ela descreve a estrutura e o conte√∫do de uma p√°gina web usando "tags". Pense nela como a planta baixa e a estrutura de uma casa.

### 1.2. Estrutura B√°sica de um Documento

Todo arquivo HTML segue uma estrutura padr√£o:

```html
<!DOCTYPE html> <html lang="pt-br"> <head>
    <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Minha Primeira P√°gina</title> </head>
<body>
    </body>
</html>
```

### 1.3. ‚ú® Pr√°tica Moderna: HTML Sem√¢ntico

Antigamente, us√°vamos `<div>` para tudo. Hoje, a pr√°tica moderna √© usar **tags sem√¢nticas**, que descrevem o significado do seu conte√∫do. Isso √© crucial para **acessibilidade** (leitores de tela) e **SEO** (mecanismos de busca).

| Tag Sem√¢ntica | Uso |
| :--- | :--- |
| `<header>` | Cabe√ßalho da p√°gina ou de uma se√ß√£o. |
| `<nav>` | Links de navega√ß√£o principais. |
| `<main>` | Conte√∫do principal e √∫nico da p√°gina. |
| `<section>` | Uma se√ß√£o tem√°tica do conte√∫do. |
| `<article>` | Um conte√∫do autossuficiente (post de blog, not√≠cia). |
| `<aside>` | Conte√∫do secund√°rio, como uma barra lateral. |
| `<footer>` | Rodap√© da p√°gina ou de uma se√ß√£o. |

**Exemplo:**

```html
<div id="header">...</div>
<div class="main-content">...</div>
<div id="footer">...</div>

<header>...</header>
<main>...</main>
<footer>...</footer>
```

### 1.4. Atividade Pr√°tica ‚úçÔ∏è

Crie um arquivo `index.html` e estruture uma p√°gina simples sobre voc√™, usando as tags sem√¢nticas `<header>`, `<main>`, `<footer>` e outras tags b√°sicas como `<h1>` (t√≠tulo principal), `<p>` (par√°grafo) e `<img>` (imagem). N√£o se preocupe com o estilo ainda\!

-----

## M√≥dulo 2: Fundamentos do CSS - Estilizando a Web üé®

Agora que temos a estrutura, vamos dar vida e estilo a ela com CSS (Cascading Style Sheets).

### 2.1. O que √© CSS e como inclu√≠-lo?

CSS √© a linguagem que usamos para estilizar os elementos HTML. A forma mais recomendada de inclu√≠-lo √© atrav√©s de um **arquivo externo**.

No seu `<head>` do HTML:

```html
<link rel="stylesheet" href="style.css">
```

No seu arquivo `style.css`:

```css
/* seletor { propriedade: valor; } */
body {
    background-color: #f0f0f0;
    font-family: sans-serif;
}
```

### 2.2. ‚ú® Pr√°tica Moderna: Box Model e CSS Reset

Todo elemento HTML √© uma caixa. O `box-sizing` controla como o tamanho dessa caixa √© calculado. A pr√°tica moderna universal √© usar `border-box`.

Adicionalmente, os navegadores aplicam estilos padr√£o diferentes. Um **CSS Reset** zera esses estilos para garantir consist√™ncia.

Coloque este c√≥digo no topo do seu arquivo `style.css`:

```css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
```

### 2.3. ‚ú® Pr√°tica Moderna: Unidades Relativas (rem)

Em vez de usar pixels (`px`) para tamanhos de fonte e espa√ßamentos, a pr√°tica moderna prefere unidades relativas como `rem`.

  * **`px` (pixel)**: Unidade absoluta e fixa.
  * **`rem` (root em)**: Unidade relativa ao tamanho da fonte da tag `<html>`. Se o usu√°rio aumentar o tamanho da fonte padr√£o do navegador por quest√µes de acessibilidade, toda a sua interface se ajustar√° proporcionalmente.

<!-- end list -->

```css
html {
  font-size: 16px; /* O padr√£o da maioria dos navegadores */
}

h1 {
  font-size: 2rem; /* 2 * 16px = 32px */
}

p {
  font-size: 1rem; /* 1 * 16px = 16px */
  margin-top: 1.5rem; /* 1.5 * 16px = 24px */
}
```

### 2.4. Atividade Pr√°tica ‚úçÔ∏è

Crie um arquivo `style.css` e aplique estilos b√°sicos √† sua p√°gina `index.html`. Defina cores, altere fontes e use a unidade `rem` para tamanhos e espa√ßamentos. N√£o se esque√ßa de adicionar o CSS Reset no in√≠cio\!

-----

## M√≥dulo 3: Layouts Modernos com Flexbox e Grid üèóÔ∏è

Esque√ßa `float` e `position` para criar layouts. As ferramentas modernas para isso s√£o Flexbox e CSS Grid.

### 3.1. Flexbox

Ideal para alinhar itens em **uma dimens√£o** (uma linha ou uma coluna). Perfeito para componentes como cabe√ßalhos, menus de navega√ß√£o e alinhamento de itens em um cart√£o.

**Exemplo: Um cabe√ßalho de navega√ß√£o**

```html
<nav class="main-nav">
  <a href="#">Home</a>
  <a href="#">Sobre</a>
  <a href="#">Contato</a>
</nav>
```

```css
.main-nav {
  display: flex; /* Ativa o Flexbox */
  justify-content: space-around; /* Distribui os itens horizontalmente */
  align-items: center; /* Centraliza os itens verticalmente */
  padding: 1rem;
  background-color: #333;
}
```

### 3.2. CSS Grid

Ideal para layouts em **duas dimens√µes** (linhas e colunas). Perfeito para o layout geral da p√°gina ou para galerias de imagens.

**Exemplo: Uma galeria de cart√µes**

```html
<div class="card-gallery">
  <div class="card">...</div>
  <div class="card">...</div>
  <div class="card">...</div>
</div>
```

```css
.card-gallery {
  display: grid; /* Ativa o Grid */
  /* Cria 3 colunas de tamanho igual e flex√≠vel */
  grid-template-columns: repeat(3, 1fr);
  gap: 1.5rem; /* Espa√ßamento entre os itens do grid */
}
```

### 3.3. Atividade Pr√°tica ‚úçÔ∏è

Refatore sua p√°gina para ter um cabe√ßalho com navega√ß√£o usando **Flexbox** e crie uma se√ß√£o no `<main>` com uma grade de cart√µes (pode ser com texto simples dentro) usando **CSS Grid**.

-----

## M√≥dulo 4: T√≥picos Avan√ßados e Responsividade üì±

Neste m√≥dulo, faremos nosso site se adaptar a qualquer tela e organizaremos nosso CSS de forma profissional.

### 4.1. ‚ú® Pr√°tica Moderna: Design Responsivo com Media Queries

Media Queries permitem aplicar estilos CSS apenas sob certas condi√ß√µes, como a largura da tela. A abordagem **Mobile First** (come√ßar estilizando para telas pequenas) √© a mais recomendada.

```css
/* Estilos base (para mobile) */
.container {
  width: 100%;
  padding: 1rem;
}

/* Estilos para telas maiores (ex: tablets e desktops) */
@media (min-width: 768px) {
  .container {
    max-width: 800px;
    margin: 0 auto; /* Centraliza o container */
  }

  .card-gallery {
    grid-template-columns: repeat(3, 1fr); /* 3 colunas em telas maiores */
  }
}
```

### 4.2. ‚ú® Pr√°tica Moderna: Metodologia BEM

BEM (Block, Element, Modifier) √© uma conven√ß√£o de nomenclatura que torna seu CSS mais leg√≠vel, reutiliz√°vel e escal√°vel.

  * **Block**: Um componente aut√¥nomo (`.card`, `.nav`).
  * **Element**: Uma parte de um bloco (`.card__title`, `.nav__link`).
  * **Modifier**: Uma varia√ß√£o de um bloco ou elemento (`.card--dark`, `.nav__link--active`).

<!-- end list -->

```html
<div class="card card--featured">
  <h2 class="card__title">T√≠tulo do Card</h2>
  <button class="card__button card__button--primary">Saiba mais</button>
</div>
```

### 4.3. ‚ú® Pr√°tica Moderna: Vari√°veis CSS (Custom Properties)

Vari√°veis CSS permitem que voc√™ armazene valores para reutilizar em seu c√≥digo. √â excelente para criar sistemas de design e temas (como um modo escuro).

```css
:root {
  --cor-primaria: #007bff;
  --cor-texto: #333;
  --tamanho-fonte-base: 1rem;
}

body {
  color: var(--cor-texto);
  font-size: var(--tamanho-fonte-base);
}

.button-primary {
  background-color: var(--cor-primaria);
}
```

### 4.4. Atividade Pr√°tica ‚úçÔ∏è

1.  Torne sua p√°gina totalmente responsiva usando **Media Queries**.
2.  Refatore seu CSS para usar a metodologia **BEM** em suas classes.
3.  Defina e utilize **Vari√°veis CSS** para as cores e fontes principais do seu site.

-----

## M√≥dulo 5: Projeto Final - Construindo um Cart√£o de Perfil Moderno üåü

Vamos aplicar tudo o que aprendemos para criar um componente final: um cart√£o de perfil responsivo.

**Requisitos:**

1.  **HTML Sem√¢ntico**: Use as tags apropriadas.
2.  **Layout**: Use Flexbox e/ou Grid para o layout interno do cart√£o.
3.  **Responsividade**: O cart√£o deve se adaptar bem em telas pequenas e grandes.
4.  **Estilo Profissional**: Use Vari√°veis CSS e a metodologia BEM.

**Estrutura Sugerida:**

```html
<article class="profile-card">
  <header class="profile-card__header">
    <img class="profile-card__avatar" src="url-da-sua-foto.jpg" alt="Foto de Perfil de [Seu Nome]">
  </header>
  <main class="profile-card__body">
    <h1 class="profile-card__name">[Seu Nome]</h1>
    <p class="profile-card__role">Desenvolvedor(a) Front-end</p>
    <p class="profile-card__bio">Uma breve descri√ß√£o sobre suas paix√µes e habilidades em tecnologia.</p>
  </main>
  <footer class="profile-card__footer">
    <a href="#" class="profile-card__link">GitHub</a>
    <a href="#" class="profile-card__link">LinkedIn</a>
    <a href="#" class="profile-card__link">Twitter</a>
  </footer>
</article>
```

Tente construir o CSS para este cart√£o sozinho. Use sua criatividade\!

-----

## Conclus√£o e Pr√≥ximos Passos üéâ

Parab√©ns\! Voc√™ concluiu o curso e agora tem uma base s√≥lida nas pr√°ticas mais modernas de HTML e CSS. Voc√™ √© capaz de criar p√°ginas web bem-estruturadas, estilosas e responsivas.

**O que estudar agora?**

  * **JavaScript**: Para adicionar interatividade √†s suas p√°ginas.
  * **TypeScript
  * **Anima√ß√µes CSS**: Para criar transi√ß√µes e efeitos visuais.
  * **BooStrap
  * **Pr√©-processadores CSS (Sass)**: Para escrever CSS com superpoderes.
  * **Frameworks (React, Vue, Angular)**: Para construir aplica√ß√µes web complexas.

---

### [ricardotecpro.github.io](https://ricardotecpro.github.io/)
